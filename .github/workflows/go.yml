name: 编译并部署到测试服务器

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      - name: 设置Go环境
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: 编译程序
        run: |
          GOOS=linux GOARCH=amd64 go build -o myapp 
          ls -l myapp  # 确认编译成功

      - name: 部署到测试服务器
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.TEST_SERVER_HOST }}
          username: ${{ secrets.TEST_SERVER_USER }}
          key: ${{ secrets.TEST_SERVER_SSH_KEY }}
          port: ${{ secrets.TEST_SERVER_PORT || 22 }}
          script: |
            # 步骤1：停止旧服务
            echo "停止旧服务..."
            pkill -f "/home/testapp/myapp" || echo "旧服务未运行"
            sleep 1

            # 步骤2：确保目标目录存在（关键）
            echo "检查目标目录..."
            mkdir -p /home/testapp  # 若目录不存在则创建
            chmod 755 /home/testapp  # 确保有写入权限

            # 步骤3：scp传输文件到/home/testapp目录
            echo "传输新文件到/home/testapp..."
            scp -P ${{ secrets.TEST_SERVER_PORT || 22 }} \
              runner@${{ github.server_url_host }}:${{ github.workspace }}/myapp \
              /home/testapp/myapp_new  # 明确指定目标目录

            # 检查传输结果
            if [ ! -f "/home/testapp/myapp_new" ]; then
              echo "错误：文件未传输到/home/testapp"
              exit 1
            fi

            # 步骤4：替换文件并启动新服务
            echo "启动新服务..."
            mv /home/testapp/myapp_new /home/testapp/myapp
            chmod +x /home/testapp/myapp
            nohup /home/testapp/myapp > /home/testapp/app.log 2>&1 &

            # 验证启动
            sleep 2
            if pgrep -f "/home/testapp/myapp" > /dev/null; then
              echo "新服务在/home/testapp启动成功"
            else
              echo "启动失败，日志："
              cat /home/testapp/app.log
              exit 1
            fi

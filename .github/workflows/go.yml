name: Docker 容器化部署

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 构建 Docker 镜像
        run: |
          cat > Dockerfile << 'EOF'
          # 构建阶段使用 Golang 镜像
          FROM golang:1.22-alpine AS builder
          
          WORKDIR /app
          
          # 先复制依赖文件并下载，利用缓存减少重复下载
          COPY go.mod  ./
          RUN go mod download && go mod verify
          
          # 再复制源代码（避免依赖变动时重新编译）
          COPY . .
          
          # 验证主文件存在
          RUN if [ ! -f "main.go" ]; then echo "错误：main.go 不存在"; exit 1; fi
          
          # 安装编译依赖（Alpine 缺少 gcc 等工具）
          RUN apk add --no-cache gcc musl-dev libc6-compat
          
          # 优化编译参数：解决静态链接问题
          RUN GOOS=linux GOARCH=amd64 \
              CGO_ENABLED=1 \
              CC=gcc \
              go build -a -installsuffix cgo \
              -ldflags="-s -w -linkmode external -extldflags '-static -lm -ldl'" \
              -o myapp main.go
          
          # 验证编译结果
          RUN if [ ! -f "myapp" ]; then echo "错误：编译失败，未生成 myapp"; exit 1; fi
          
          # 最终镜像
          FROM alpine:3.18
          RUN apk add --no-cache ca-certificates tzdata
          WORKDIR /app
          COPY --from=builder /app/myapp .
          EXPOSE 8054
          CMD ["./myapp"]
          EOF
          
          # 构建时输出详细日志，便于排查错误
          docker build -t myapp:latest . --progress=plain
          
          docker save -o myapp-image.tar myapp:latest
          ls -l myapp-image.tar

      - name: 停止服务器上的旧容器
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.TEST_SERVER_HOST }}
          username: ${{ secrets.TEST_SERVER_USER }}
          key: ${{ secrets.TEST_SERVER_SSH_KEY }}
          port: ${{ secrets.TEST_SERVER_PORT || 22 }}
          script: |
            docker stop myapp-container || true
            docker rm myapp-container || true
            docker rmi myapp:latest || true

      - name: 传输 Docker 镜像到服务器
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.TEST_SERVER_HOST }}
          username: ${{ secrets.TEST_SERVER_USER }}
          key: ${{ secrets.TEST_SERVER_SSH_KEY }}
          port: ${{ secrets.TEST_SERVER_PORT || 22 }}
          source: "myapp-image.tar"
          target: "/home/testapp"
          rm: true

      - name: 在服务器上加载并启动容器
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.TEST_SERVER_HOST }}
          username: ${{ secrets.TEST_SERVER_USER }}
          key: ${{ secrets.TEST_SERVER_SSH_KEY }}
          port: ${{ secrets.TEST_SERVER_PORT || 22 }}
          script: |
            TARGET_DIR="/home/testapp"
            cd $TARGET_DIR
            docker load -i myapp-image.tar
            
            docker run -d \
              --name myapp-container \
              -p 8054:8054 \
              myapp:latest
            
            sleep 2
            if docker ps | grep myapp-container; then
              echo "容器启动成功"
              docker logs myapp-container
            else
              echo "容器启动失败，查看日志："
              docker logs myapp-container
              exit 1
            fi

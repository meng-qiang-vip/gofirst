name: Docker 容器化部署

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 构建 Docker 镜像
        run: |
          # 使用与服务器兼容的基础镜像（如 alpine 或特定版本 ubuntu）
          # 选择与目标服务器系统匹配的基础镜像，解决 GLIBC 问题
          cat > Dockerfile << 'EOF'
          # 使用轻量且且兼容性好的 alpine 作为基础镜像
          FROM golang:1.22-alpine AS builder
          
          # 设置工作目录
          WORKDIR /app
          
          # 复制源代码
          COPY . .
          
          # 安装编译依赖
          RUN apk add --no-cache gcc musl-dev
          
          # 编译应用（静态链接，确保兼容性）
          RUN GOOS=linux GOARCH=amd64 \
              CGO_ENABLED=1 \
              go build -ldflags="-s -w -linkmode external -extldflags '-static'" \
              -o myapp main.go
          
          # 构建最终镜像（使用更小的基础镜像）
          FROM alpine:3.18
          
          # 安装必要的系统工具
          RUN apk add --no-cache ca-certificates tzdata
          
          # 设置工作目录
          WORKDIR /app
          
          # 从构建阶段复制编译好的应用
          COPY --from=builder /app/myapp .
          
          # 暴露应用端口（根据实际情况修改）
          EXPOSE 8080
          
          # 启动命令
          CMD ["./myapp"]
          EOF
          
          # 构建镜像
          docker build -t myapp:latest .
          
          # 保存镜像为 tar 文件，便于传输
          docker save -o myapp-image.tar myapp:latest
          
          # 验证文件存在
          ls -l myapp-image.tar

      - name: 停止服务器上的旧容器
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.TEST_SERVER_HOST }}
          username: ${{ secrets.TEST_SERVER_USER }}
          key: ${{ secrets.TEST_SERVER_SSH_KEY }}
          port: ${{ secrets.TEST_SERVER_PORT || 22 }}
          script: |
            # 停止并删除旧容器
            docker stop myapp-container || true
            docker rm myapp-container || true
            # 清理旧镜像
            docker rmi myapp:latest || true

      - name: 传输 Docker 镜像到服务器
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.TEST_SERVER_HOST }}
          username: ${{ secrets.TEST_SERVER_USER }}
          key: ${{ secrets.TEST_SERVER_SSH_KEY }}
          port: ${{ secrets.TEST_SERVER_PORT || 22 }}
          source: "myapp-image.tar"
          target: "/home/testapp"
          rm: true

      - name: 在服务器上加载并启动容器
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.TEST_SERVER_HOST }}
          username: ${{ secrets.TEST_SERVER_USER }}
          key: ${{ secrets.TEST_SERVER_SSH_KEY }}
          port: ${{ secrets.TEST_SERVER_PORT || 22 }}
          script: |
            TARGET_DIR="/home/testapp"
            cd $TARGET_DIR
            
            # 加载镜像
            docker load -i myapp-image.tar
            
            # 启动新容器
            docker run -d \
              --name myapp-container \
              -p 8054:8054 \  # 端口映射（根据应用实际端口修改）
              myapp:latest
            
            # 验证容器状态
            sleep 2
            if docker ps | grep myapp-container; then
              echo "容器启动成功"
              # 查看容器日志
              docker logs myapp-container
            else
              echo "容器启动失败，查看日志："
              docker logs myapp-container
              exit 1
            fi

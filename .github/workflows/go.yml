name: 编译并部署到测试服务器

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      - name: 设置Go环境
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
           # 修复：如果项目没有go.sum，关闭缓存或指定自定义缓存键
          cache: ${{ hashFiles('**/go.sum') != '' }}  # 只有存在go.sum时才启用缓存
          # 或者完全关闭缓存（适合简单项目）
          # cache: false

      - name: 编译程序
        run: |
          GOOS=linux GOARCH=amd64 go build -o myapp 
          ls -l myapp  # 确认编译成功

      - name: 部署到测试服务器
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.TEST_SERVER_HOST }}
          username: ${{ secrets.TEST_SERVER_USER }}
          key: ${{ secrets.TEST_SERVER_SSH_KEY }}
          port: ${{ secrets.TEST_SERVER_PORT || 22 }}
          script: |
            # 定义路径
            TARGET_DIR="/home/testapp"
            mkdir -p $TARGET_DIR
            
            # 关键修复：将私钥写入临时文件，供scp使用
            echo "${{ secrets.TEST_SERVER_SSH_KEY }}" > /tmp/deploy_key
            chmod 600 /tmp/deploy_key  # 私钥必须设置600权限
            
            # 传输新文件
            scp -o StrictHostKeyChecking=no \
               -i /tmp/deploy_key \  # 显式使用私钥
              ${{ github.workspace }}/myapp \
              ${{ secrets.TEST_SERVER_USER }}@${{ secrets.TEST_SERVER_HOST }}:$TARGET_DIR
            
            # 启动新服务
            chmod +x $TARGET_DIR/myapp
            nohup $TARGET_DIR/myapp > $TARGET_DIR/app.log 2>&1 &
            
            # 验证启动
            sleep 2
            if pgrep -f "$TARGET_DIR/myapp"; then
              echo "部署成功"
            else
              echo "启动失败，日志："
              cat $TARGET_DIR/app.log
              exit 1
            fi

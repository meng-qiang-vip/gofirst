name: 解决GLIBC版本不兼容问题

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 设置Go环境
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: false

      - name: 编译Go应用（兼容旧版GLIBC）
        run: |
          # 关键：添加编译参数，降低GLIBC依赖版本
          GOOS=linux GOARCH=amd64 \
          CGO_CFLAGS="-D_GLIBCXX_USE_CXX11_ABI=0" \
          go build -ldflags="-s -w -linkmode external -extldflags '-static'" \
          -o myapp main.go
          
          chmod +x myapp
          # 验证编译结果
          if [ ! -f "myapp" ]; then
            echo "编译失败：未生成myapp文件"
            exit 1
          fi
          # 查看编译后的二进制文件依赖的GLIBC版本
          objdump -T myapp | grep GLIBC_ | sort -u

      - name: 停止服务器上的旧服务
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.TEST_SERVER_HOST }}
          username: ${{ secrets.TEST_SERVER_USER }}
          key: ${{ secrets.TEST_SERVER_SSH_KEY }}
          port: ${{ secrets.TEST_SERVER_PORT || 22 }}
          script: |
            TARGET_DIR="/home/testapp"
            mkdir -p $TARGET_DIR
            pkill -f "$TARGET_DIR/myapp" || true
            sleep 1

      - name: 传输文件到服务器
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.TEST_SERVER_HOST }}
          username: ${{ secrets.TEST_SERVER_USER }}
          key: ${{ secrets.TEST_SERVER_SSH_KEY }}
          port: ${{ secrets.TEST_SERVER_PORT || 22 }}
          source: "myapp"
          target: "/home/testapp"
          rm: true

      - name: 启动新服务并验证
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.TEST_SERVER_HOST }}
          username: ${{ secrets.TEST_SERVER_USER }}
          key: ${{ secrets.TEST_SERVER_SSH_KEY }}
          port: ${{ secrets.TEST_SERVER_PORT || 22 }}
          script: |
            TARGET_DIR="/home/testapp"
            chmod +x $TARGET_DIR/myapp
            
            # 检查服务器GLIBC版本
            echo "服务器GLIBC版本："
            ldd --version | head -n 1
            
            # 尝试启动并捕获错误
            nohup $TARGET_DIR/myapp > $TARGET_DIR/app.log 2>&1 &
            sleep 2
            
            if pgrep -f "$TARGET_DIR/myapp"; then
              echo "新服务启动成功"
            else
              echo "启动失败，日志："
              cat $TARGET_DIR/app.log
              exit 1
            fi
